local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local VoiceChatService = game:GetService("VoiceChatService")

local LocalPlayer = Players.LocalPlayer

-- Hilfsfunktion, um Movement wieder zu aktivieren (entankern, PlatformStand deaktivieren)
local function reEnableMovement()
	local char = LocalPlayer.Character
	if char then
		local root = char:FindFirstChild("HumanoidRootPart")
		local hum = char:FindFirstChild("Humanoid")
		if root then
			root.Anchored = false
		end
		if hum then
			hum.PlatformStand = false
			hum.Sit = false
		end
	end
end

-- Acrylic false, damit kein Blur erzeugt wird
local Window = Fluent:CreateWindow({
	Title = "Voice Ban Bypasser",
	SubTitle = "",
	TabWidth = 160,
	Size = UDim2.fromOffset(580, 460),
	Acrylic = false,
	Theme = "Dark",
	MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
	Player   = Window:AddTab({ Title = "Player",   Icon = "user" }),
	Chams    = Window:AddTab({ Title = "Chams",    Icon = "eye" }),
	Voice    = Window:AddTab({ Title = "Voice",    Icon = "mic" }),
	Teleport = Window:AddTab({ Title = "Teleport", Icon = "map" }),
	Spectate = Window:AddTab({ Title = "Spectate", Icon = "camera" }),
	Info     = Window:AddTab({ Title = "Info",     Icon = "heart" }),
	Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local currentSpeed = 16
local flySpeed = 50
local flyBodyVelocity, flyBodyGyro, flyConnection

---------------------------------------------------------------------
-- Hilfsfunktionen
---------------------------------------------------------------------
local function getRootPart(character)
	local root = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
	if not root then
		local success
		success, root = pcall(function()
			return character:WaitForChild("HumanoidRootPart", 5)
		end)
	end
	return root
end

local function setWalkSpeed(speed)
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("Humanoid") then
		char.Humanoid.WalkSpeed = speed
	end
end

local function enableFly()
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("HumanoidRootPart") then
		local root = char.HumanoidRootPart
		flyBodyVelocity = Instance.new("BodyVelocity", root)
		flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
		flyBodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)

		flyBodyGyro = Instance.new("BodyGyro", root)
		flyBodyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
		flyBodyGyro.CFrame = root.CFrame

		flyConnection = RunService.RenderStepped:Connect(function()
			local dir = Vector3.new(0, 0, 0)
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then
				dir = dir + Workspace.CurrentCamera.CFrame.LookVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then
				dir = dir - Workspace.CurrentCamera.CFrame.LookVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then
				dir = dir - Workspace.CurrentCamera.CFrame.RightVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then
				dir = dir + Workspace.CurrentCamera.CFrame.RightVector
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
				dir = dir + Vector3.new(0,1,0)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				dir = dir - Vector3.new(0,1,0)
			end

			if dir.Magnitude > 0 then
				flyBodyVelocity.Velocity = dir.Unit * flySpeed
			else
				flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
			end
			flyBodyGyro.CFrame = Workspace.CurrentCamera.CFrame
		end)
	end
end

local function disableFly()
	if flyBodyVelocity then flyBodyVelocity:Destroy() flyBodyVelocity = nil end
	if flyBodyGyro then flyBodyGyro:Destroy() flyBodyGyro = nil end
	if flyConnection then flyConnection:Disconnect() flyConnection = nil end
end

---------------------------------------------------------------------
-- Teleport-Funktion (wartet auf vollständigen Character)
---------------------------------------------------------------------
local function TeleportToPlayer(targetPlayer)
	local localChar = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local targetChar = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
	local root = getRootPart(localChar)
	local targetRoot = getRootPart(targetChar)
	if root and targetRoot then
		root.CFrame = targetRoot.CFrame
	else
		warn("Teleportation fehlgeschlagen, kein Root-Part gefunden.")
	end
end

---------------------------------------------------------------------
-- Spectate-Funktionen (wartet auf vollständigen Character)
---------------------------------------------------------------------
local function SpectatePlayer(targetPlayer)
	local targetChar = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
	local humanoid = targetChar:FindFirstChild("Humanoid")
	if humanoid then
		Workspace.CurrentCamera.CameraSubject = humanoid
		Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
		print("Spectating " .. targetPlayer.Name)
	else
		warn("Kein Humanoid bei " .. targetPlayer.Name .. " gefunden.")
	end
end

local function StopSpectating()
	local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = char:FindFirstChild("Humanoid")
	if humanoid then
		Workspace.CurrentCamera.CameraSubject = humanoid
		Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
		print("Spectating beendet.")
		reEnableMovement()
	end
end

---------------------------------------------------------------------
-- Skeleton ESP (Drawing API)
---------------------------------------------------------------------
local SkeletonConnections = {
	{"Head", "UpperTorso"},
	{"UpperTorso", "LeftUpperArm"},
	{"LeftUpperArm", "LeftLowerArm"},
	{"LeftLowerArm", "LeftHand"},
	{"UpperTorso", "RightUpperArm"},
	{"RightUpperArm", "RightLowerArm"},
	{"RightLowerArm", "RightHand"},
	{"UpperTorso", "LowerTorso"},
	{"LowerTorso", "LeftUpperLeg"},
	{"LeftUpperLeg", "LeftLowerLeg"},
	{"LeftLowerLeg", "LeftFoot"},
	{"LowerTorso", "RightUpperLeg"},
	{"RightUpperLeg", "RightLowerLeg"},
	{"RightLowerLeg", "RightFoot"}
}

local skeletonESPEnabled = false
local skeletonESPColor = Color3.new(1, 0, 0)
local SkeletonESPs = {}

local function CreateSkeletonForPlayer(player)
	local drawings = {}
	for i, connection in ipairs(SkeletonConnections) do
		local line = Drawing.new("Line")
		line.Visible = true
		line.Transparency = 1
		line.Color = skeletonESPColor
		line.Thickness = 2
		drawings[i] = line
	end
	SkeletonESPs[player] = drawings
end

local function UpdateSkeletonESP(player)
	if not SkeletonESPs[player] then
		CreateSkeletonForPlayer(player)
	end
	local drawings = SkeletonESPs[player]
	local character = player.Character
	if character then
		for i, connection in ipairs(SkeletonConnections) do
			local partA = character:FindFirstChild(connection[1])
			local partB = character:FindFirstChild(connection[2])
			if partA and partB then
				local vectorA, onScreenA = Workspace.CurrentCamera:WorldToViewportPoint(partA.Position)
				local vectorB, onScreenB = Workspace.CurrentCamera:WorldToViewportPoint(partB.Position)
				if onScreenA and onScreenB then
					drawings[i].Visible = true
					drawings[i].From = Vector2.new(vectorA.X, vectorA.Y)
					drawings[i].To = Vector2.new(vectorB.X, vectorB.Y)
					drawings[i].Color = skeletonESPColor
				else
					drawings[i].Visible = false
				end
			else
				drawings[i].Visible = false
			end
		end
	end
end

Players.PlayerRemoving:Connect(function(player)
	if SkeletonESPs[player] then
		for _, line in ipairs(SkeletonESPs[player]) do
			line:Remove()
		end
		SkeletonESPs[player] = nil
	end
end)

RunService.RenderStepped:Connect(function()
	if skeletonESPEnabled then
		for _, player in pairs(Players:GetPlayers()) do
			if player ~= LocalPlayer and player.Character then
				UpdateSkeletonESP(player)
			end
		end
	end
end)

---------------------------------------------------------------------
-- Tab: Player
---------------------------------------------------------------------
local PlayerSection = Tabs.Player:AddSection("Speed, Fly")
PlayerSection:AddSlider("SpeedSlider", {
	Title = "Walk Speed",
	Default = 16,
	Min = 0,
	Max = 100,
	Rounding = 0
}):OnChanged(function(value)
	currentSpeed = value
	setWalkSpeed(currentSpeed)
end)

PlayerSection:AddToggle("FlyToggle", { Title = "Fly", Default = false })
	:OnChanged(function(state)
		if state then
			enableFly()
		else
			disableFly()
		end
	end)

PlayerSection:AddSlider("FlySpeedSlider", {
	Title = "Fly Speed",
	Default = 50,
	Min = 0,
	Max = 300,
	Rounding = 0
}):OnChanged(function(value)
	flySpeed = value
end)

---------------------------------------------------------------------
-- Anti AFK
---------------------------------------------------------------------
local AntiAFKSection = Tabs.Player:AddSection("Anti AFK")
local AFKConnection

local function EnableAntiAFK()
	if AFKConnection then
		AFKConnection:Disconnect()
		AFKConnection = nil
	end
	AFKConnection = LocalPlayer.Idled:Connect(function()
		game:GetService("VirtualUser"):CaptureController()
		game:GetService("VirtualUser"):ClickButton2(Vector2.new())
	end)
end

local function DisableAntiAFK()
	if AFKConnection then
		AFKConnection:Disconnect()
		AFKConnection = nil
	end
end

AntiAFKSection:AddToggle("AntiAFKToggle", { Title = "Anti AFK", Default = false })
	:OnChanged(function(state)
		if state then
			EnableAntiAFK()
		else
			DisableAntiAFK()
		end
	end)

---------------------------------------------------------------------
-- Tab: Chams (ESP / Nametags)
---------------------------------------------------------------------
local chamsActive = false
local chamsColor = Color3.fromRGB(255, 255, 255)

-- Hier wird ein Highlight-Objekt pro Spieler verwendet, das exakt die Spielerform abdeckt
local function RemoveChams()
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character then
			local highlight = p.Character:FindFirstChild("ChamHighlight")
			if highlight then
				highlight:Destroy()
			end
		end
	end
end

local function UpdateChams()
	for _, p in pairs(Players:GetPlayers()) do
		if p ~= LocalPlayer and p.Character then
			local highlight = p.Character:FindFirstChild("ChamHighlight")
			if not highlight then
				highlight = Instance.new("Highlight")
				highlight.Name = "ChamHighlight"
				highlight.FillColor = chamsColor
				highlight.OutlineColor = chamsColor
				highlight.FillTransparency = 0.5
				highlight.OutlineTransparency = 0
				highlight.Parent = p.Character
			else
				highlight.FillColor = chamsColor
				highlight.OutlineColor = chamsColor
			end
		end
	end
end

local chamsTask
local function chamsLoop()
	while chamsActive do
		UpdateChams()
		task.wait(2)
	end
end

local chamsSection = Tabs.Chams:AddSection("chams")
chamsSection:AddToggle("ChamsToggle", { Title = "chams", Default = false })
	:OnChanged(function(state)
		chamsActive = state
		if state then
			chamsTask = task.spawn(chamsLoop)
		else
			if chamsTask then task.cancel(chamsTask) end
			chamsTask = nil
			RemoveChams()
		end
	end)

chamsSection:AddColorpicker("ChamsColor", { Title = "chams color", Default = chamsColor })
	:OnChanged(function(c)
		chamsColor = c
	end)

-- Skeleton ESP Toggle und Skeleton Colorpicker
chamsSection:AddToggle("SkeletonESPToggle", { Title = "Skeleton ESP", Default = false })
	:OnChanged(function(state)
		skeletonESPEnabled = state
		if not state then
			for player, lines in pairs(SkeletonESPs) do
				for _, line in ipairs(lines) do
					line:Remove()
				end
			end
			SkeletonESPs = {}
		end
	end)

chamsSection:AddColorpicker("SkeletonESPColor", { Title = "Skeleton Color", Default = skeletonESPColor })
	:OnChanged(function(c)
		skeletonESPColor = c
	end)

---------------------------------------------------------------------
-- Nametags
---------------------------------------------------------------------
local NametagsActive = false
local nametagTask

local function CreateNametag(p)
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "Nametag"
	billboard.Size = UDim2.new(0, 50, 0, 50)
	billboard.StudsOffset = Vector3.new(0, 2, 0)
	billboard.AlwaysOnTop = true

	local frame = Instance.new("Frame", billboard)
	frame.Size = UDim2.new(1, 0, 1, 0)
	frame.BackgroundTransparency = 1

	local label = Instance.new("TextLabel", frame)
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = p.Name
	label.TextScaled = false
	label.TextSize = 14
	label.Font = Enum.Font.GothamBold
	label.TextColor3 = chamsColor
	label.TextStrokeTransparency = 0.3

	return billboard
end

local function RemoveNametags()
	for _, p in pairs(Players:GetPlayers()) do
		if p.Character and p.Character:FindFirstChild("Head") then
			local tag = p.Character.Head:FindFirstChild("Nametag")
			if tag then
				tag:Destroy()
			end
		end
	end
end

local function UpdateNametags()
	for _, p in pairs(Players:GetPlayers()) do
		if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("Head") then
			local head = p.Character.Head
			local existing = head:FindFirstChild("Nametag")
			if not existing then
				local tag = CreateNametag(p)
				tag.Parent = head
			else
				existing.Size = UDim2.new(0, 50, 0, 50)
				local frame = existing:FindFirstChildOfClass("Frame")
				if frame then
					local lbl = frame:FindFirstChildOfClass("TextLabel")
					if lbl then
						lbl.TextColor3 = chamsColor
					end
				end
			end
		end
	end
end

local function NametagsLoop()
	while NametagsActive do
		UpdateNametags()
		task.wait(2)
	end
end

local nametagsSection = Tabs.Chams:AddSection("nametags")
nametagsSection:AddToggle("NametagsToggle", { Title = "enable nametag", Default = false })
	:OnChanged(function(s)
		NametagsActive = s
		if s then
			nametagTask = task.spawn(NametagsLoop)
		else
			if nametagTask then task.cancel(nametagTask) end
			nametagTask = nil
			RemoveNametags()
		end
	end)

---------------------------------------------------------------------
-- Tab: Voice
---------------------------------------------------------------------
local VoiceSection = Tabs.Voice:AddSection("Voice Chat")

VoiceSection:AddButton({
	Title = "Bypass Voiceban",
	Callback = function()
		if VoiceChatService and VoiceChatService.joinVoice then
			local success, err = pcall(function()
				VoiceChatService:joinVoice()
			end)
			if not success then
				warn("Voice join failed: " .. err)
			else
				print("Attempted to join voice.")
				reEnableMovement()
			end
		else
			warn("VoiceChatService oder joinVoice() nicht verfügbar.")
		end
	end
})

local function isVoiceConnected()
	if not VoiceChatService then 
		return false 
	end
	local success, result = pcall(function()
		return VoiceChatService.Running
	end)
	if success and result == true then
		return true
	end
	return false
end

local autoVoiceJoinActive = false
local autoVoiceJoinTask

local function autoVoiceJoinLoop()
	while autoVoiceJoinActive do
		if not isVoiceConnected() then
			if VoiceChatService and VoiceChatService.joinVoice then
				local success, err = pcall(function()
					VoiceChatService:joinVoice()
				end)
				if success then
					print("Auto Voice Join: Versuch, Voicechat beizutreten.")
					reEnableMovement()
				else
					warn("Auto Voice Join fehlgeschlagen: " .. err)
				end
			end
		end
		task.wait(5)
	end
end

VoiceSection:AddToggle("AutoVoiceJoinToggle", { Title = "Auto Voice Join (experimental)", Default = false })
	:OnChanged(function(state)
		autoVoiceJoinActive = state
		if state then
			autoVoiceJoinTask = task.spawn(autoVoiceJoinLoop)
		else
			if autoVoiceJoinTask then task.cancel(autoVoiceJoinTask) end
			autoVoiceJoinTask = nil
		end
	end)

---------------------------------------------------------------------
-- Tab: Teleport
---------------------------------------------------------------------
local TeleportSection = Tabs.Teleport:AddSection("Teleport Players")

for _, plr in pairs(Players:GetPlayers()) do
	if plr ~= LocalPlayer then
		TeleportSection:AddButton({
			Title = plr.Name,
			Callback = function()
				TeleportToPlayer(plr)
			end
		})
	end
end

Players.PlayerAdded:Connect(function(plr)
	if plr ~= LocalPlayer then
		TeleportSection:AddButton({
			Title = plr.Name,
			Callback = function()
				TeleportToPlayer(plr)
			end
		})
	end
end)

---------------------------------------------------------------------
-- Tab: Spectate
---------------------------------------------------------------------
local SpectateSection = Tabs.Spectate:AddSection("Spectate Players")

SpectateSection:AddButton({
	Title = "Stop Spectate",
	Callback = function()
		StopSpectating()
	end
})

for _, plr in pairs(Players:GetPlayers()) do
	if plr ~= LocalPlayer then
		SpectateSection:AddButton({
			Title = plr.Name,
			Callback = function()
				SpectatePlayer(plr)
			end
		})
	end
end

Players.PlayerAdded:Connect(function(plr)
	if plr ~= LocalPlayer then
		SpectateSection:AddButton({
			Title = plr.Name,
			Callback = function()
				SpectatePlayer(plr)
			end
		})
	end
end)

---------------------------------------------------------------------
-- Tab: Info
---------------------------------------------------------------------
local InfoSection = Tabs.Info:AddSection("Info")
InfoSection:AddParagraph({
	Title = "Info",
	Content = "Made by Tapetenputzer\nDiscord: tapetenputzer"
})

---------------------------------------------------------------------
-- Settings, Speichern, Laden
---------------------------------------------------------------------
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub_MicUp")
SaveManager:SetFolder("FluentScriptHub_MicUp/configs")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

Fluent:Notify({
	Title = "Voice Ban Bypasser",
	Content = "Script Loaded!",
	Duration = 5
})
Window:SelectTab(1)
